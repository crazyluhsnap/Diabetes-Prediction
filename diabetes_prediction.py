# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kr3ilwf6xy23xJNqaImbPzPHr4Qv_cVL

Importing Libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Ananlysis"""

#loading the Diabetes Dataset into Pandas DataFrame
diabetes_dataset=pd.read_csv('/content/diabetes.csv')

#printing first 5 rows of dataset
diabetes_dataset.head()

#number of rows and columns in dataset
diabetes_dataset.shape

#getting the stats of our dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#separating the data and label
X=diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify = Y, random_state=2)

"""Training the model"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation


(Accuracy Score)

"""

#accuraxy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy score on training data: ", training_data_accuracy)

#accuraxy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy score on test data: ", test_data_accuracy)

"""Making a predictive system"""

input_data=(5,166,72,19,175,25.8,0.587,51)

#changing the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardizing the output
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")

